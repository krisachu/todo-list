{"ast":null,"code":"var _jsxFileName = \"/Users/kristina/Coding/portfolio/todo-list/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Tasks from './components/Tasks';\nimport TaskForm from './components/TaskForm';\nimport taskService from './services/tasks';\n\nconst App = () => {\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n  useEffect(() => {\n    console.log('Effect');\n    taskService.getAll().then(initialTasks => {\n      setTasks(initialTasks);\n    });\n  }, []);\n\n  const addTask = event => {\n    event.preventDefault();\n    const taskObject = {\n      content: newTask,\n      done: false\n    };\n    taskService.create(taskObject).then(returnedTask => {\n      console.log('returnedTask', returnedTask);\n      setTasks(tasks.concat(returnedTask));\n      setNewTask('');\n    });\n  };\n\n  const removeTask = id => {\n    const taskFound = tasks.find(task => task.id === id);\n\n    if (taskFound) {\n      taskService.remove(id).then(response => {\n        setTasks(tasks.filter(task => task.id !== id));\n      }).catch(error => {\n        alert(`The task '${taskFound.content}' was already deleted from server`);\n        setTasks(tasks.filter(task => task.id !== id));\n      });\n    }\n  };\n\n  const switchStateOfTask = id => {\n    // find etsii ensimmäisen arvon listasta, joka vastaa käyttäjän klikkaamaa arvoa\n    // kopioidaan klikkaama arvo ja asetetaan tilaksi vastakohta, koska klikkauksesta arvo muuttuu tehdyksi/ei tehdyksi\n    const task = tasks.find(task => task.id === id);\n    const changedTask = { ...task,\n      done: !task.done\n    }; // päivitetään kantaan käyttäjän muuttama arvo\n    // jos id:t vastaavat (setTasks-kohta), palautetaan päivitetty arvo (returnedTask) listan joukkoon\n\n    taskService.update(id, changedTask).then(returnedTask => {\n      setTasks(tasks.map(task => task.id === id ? returnedTask : task));\n    });\n  };\n\n  const editTask = (id, content) => {\n    const taskFound = tasks.find(task => task.id === id);\n\n    if (taskFound) {\n      setTasks();\n    }\n  }; // const clearList = () => {\n  //     setTasks([])\n  // }\n\n\n  const handleTaskChange = event => {\n    console.log(event.target.value);\n    setNewTask(event.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"My todo list\"), /*#__PURE__*/React.createElement(TaskForm, {\n    onSubmit: addTask,\n    taskValue: newTask,\n    onTaskChange: handleTaskChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tasks, {\n    tasks: tasks,\n    removeTask: removeTask,\n    switchStateOfTask: switchStateOfTask,\n    editTask: editTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default App; // <button onClick={clearList} type=\"button\" className=\"clear-items\">Clear list</button>","map":{"version":3,"sources":["/Users/kristina/Coding/portfolio/todo-list/src/App.js"],"names":["React","useState","useEffect","Tasks","TaskForm","taskService","App","tasks","setTasks","newTask","setNewTask","console","log","getAll","then","initialTasks","addTask","event","preventDefault","taskObject","content","done","create","returnedTask","concat","removeTask","id","taskFound","find","task","remove","response","filter","catch","error","alert","switchStateOfTask","changedTask","update","map","editTask","handleTaskChange","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Tasks from './components/Tasks';\nimport TaskForm from './components/TaskForm';\nimport taskService from './services/tasks';\n\nconst App = () => {\n    const [tasks, setTasks] = useState([]);\n    const [newTask, setNewTask] = useState('');\n\n    useEffect(() => {\n        console.log('Effect');\n        taskService.getAll().then((initialTasks) => {\n            setTasks(initialTasks);\n        });\n    }, []);\n\n    const addTask = (event) => {\n        event.preventDefault();\n\n        const taskObject = {\n            content: newTask,\n            done: false,\n        };\n\n        taskService.create(taskObject).then((returnedTask) => {\n            console.log('returnedTask', returnedTask);\n            setTasks(tasks.concat(returnedTask));\n            setNewTask('');\n        });\n    };\n\n    const removeTask = (id) => {\n        const taskFound = tasks.find((task) => task.id === id);\n\n        if (taskFound) {\n            taskService\n                .remove(id)\n                .then((response) => {\n                    setTasks(tasks.filter((task) => task.id !== id));\n                })\n                .catch((error) => {\n                    alert(\n                        `The task '${taskFound.content}' was already deleted from server`\n                    );\n                    setTasks(tasks.filter((task) => task.id !== id));\n                });\n        }\n    };\n\n    const switchStateOfTask = (id) => {\n        // find etsii ensimmäisen arvon listasta, joka vastaa käyttäjän klikkaamaa arvoa\n        // kopioidaan klikkaama arvo ja asetetaan tilaksi vastakohta, koska klikkauksesta arvo muuttuu tehdyksi/ei tehdyksi\n        const task = tasks.find((task) => task.id === id);\n        const changedTask = { ...task, done: !task.done };\n\n        // päivitetään kantaan käyttäjän muuttama arvo\n        // jos id:t vastaavat (setTasks-kohta), palautetaan päivitetty arvo (returnedTask) listan joukkoon\n        taskService.update(id, changedTask).then((returnedTask) => {\n            setTasks(\n                tasks.map((task) => (task.id === id ? returnedTask : task))\n            );\n        });\n    };\n\n    const editTask = (id, content) => {\n        const taskFound = tasks.find((task) => task.id === id);\n\n        if (taskFound) {\n            setTasks();\n        }\n    };\n\n    // const clearList = () => {\n    //     setTasks([])\n    // }\n\n    const handleTaskChange = (event) => {\n        console.log(event.target.value);\n        setNewTask(event.target.value);\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>My todo list</h1>\n\n            <TaskForm\n                onSubmit={addTask}\n                taskValue={newTask}\n                onTaskChange={handleTaskChange}\n            />\n            <Tasks\n                tasks={tasks}\n                removeTask={removeTask}\n                switchStateOfTask={switchStateOfTask}\n                editTask={editTask}\n            />\n        </div>\n    );\n};\n\nexport default App;\n\n// <button onClick={clearList} type=\"button\" className=\"clear-items\">Clear list</button>\n"]},"metadata":{},"sourceType":"module"}