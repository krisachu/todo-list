{"ast":null,"code":"var _jsxFileName = \"/Users/kristina/Coding/portfolio/todo-list/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Tasks from './components/Tasks';\nimport TaskForm from './components/TaskForm';\nimport taskService from './services/tasks';\n\nconst App = () => {\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n  useEffect(() => {\n    console.log('Effect');\n    taskService.getAll().then(initialTasks => {\n      setTasks(initialTasks);\n    });\n  }, []);\n\n  const addTask = event => {\n    event.preventDefault();\n    const taskObject = {\n      content: newTask\n    };\n    taskService.create(taskObject).then(returnedTask => {\n      console.log('returnedTask', returnedTask);\n      setTasks(tasks.concat(returnedTask));\n      setNewTask('');\n    });\n  };\n\n  const removeTask = id => {\n    const taskFound = tasks.find(task => task.id === id);\n\n    if (taskFound) {\n      taskService.remove(id).then(response => {\n        setTasks(tasks.filter(task => task.id !== id));\n      }).catch(error => {\n        alert(`The task '${taskFound.content}' was already deleted from server`);\n        setTasks(tasks.filter(task => task.id !== id));\n      });\n    }\n  };\n\n  const switchStateOfTask = id => {\n    // find etsii ensimmäisen arvon listasta, joka vastaa käyttäjän klikkaamaa arvoa\n    // kopioidaan klikkaama arvo ja asetetaan tilaksi vastakohta, koska klikkauksesta arvo muuttuu tehdyksi/ei tehdyksi\n    const task = tasks.find(task => task.id === id);\n    const changedTask = { ...task,\n      done: !task.done\n    }; // päivitetään kantaan käyttäjän muuttama arvo\n    // jos id:t vastaavat (setTasks-kohta), palautetaan päivitetty arvo (returnedTask) listan joukkoon\n\n    taskService.update(id, changedTask).then(returnedTask => {\n      setTasks(tasks.map(task => task.id === id ? returnedTask : task));\n    });\n  };\n\n  const editTask = (id, content) => {\n    const taskFound = tasks.find(task => task.id === id);\n  };\n\n  const setUpdate = (content, id) => {\n    tasks.map(task => {\n      if (task.id === id) {\n        task.content = content;\n      }\n    });\n    setTasks({\n      tasks: tasks\n    });\n  };\n\n  const clearList = () => {\n    setTasks([]);\n  };\n\n  const handleTaskChange = event => {\n    console.log(event.target.value);\n    setNewTask(event.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, \"Todo-list\"), /*#__PURE__*/React.createElement(TaskForm, {\n    onSubmit: addTask,\n    taskValue: newTask,\n    onTaskChange: handleTaskChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Tasks, {\n    tasks: tasks,\n    removeTask: removeTask,\n    switchStateOfTask: switchStateOfTask,\n    editTask: editTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clearList,\n    type: \"button\",\n    className: \"clear-items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, \"Clear list\"));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/kristina/Coding/portfolio/todo-list/src/App.js"],"names":["React","useState","useEffect","Tasks","TaskForm","taskService","App","tasks","setTasks","newTask","setNewTask","console","log","getAll","then","initialTasks","addTask","event","preventDefault","taskObject","content","create","returnedTask","concat","removeTask","id","taskFound","find","task","remove","response","filter","catch","error","alert","switchStateOfTask","changedTask","done","update","map","editTask","setUpdate","clearList","handleTaskChange","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Tasks from './components/Tasks'\nimport TaskForm from './components/TaskForm'\nimport taskService from './services/tasks'\n\n\nconst App = () => {\n\n    const [tasks, setTasks] = useState([])\n    const [newTask, setNewTask] = useState('')\n\n    useEffect(() => {\n        console.log('Effect')\n        taskService\n            .getAll()\n            .then(initialTasks => {\n                setTasks(initialTasks)\n            })\n    }, [])\n\n    const addTask = (event) => {\n        event.preventDefault()\n\n        const taskObject = {\n            content: newTask\n        }\n\n        taskService\n            .create(taskObject)\n            .then(returnedTask => {\n                console.log('returnedTask', returnedTask)\n                setTasks(tasks.concat(returnedTask))\n                setNewTask('')\n            })\n    }\n\n    const removeTask = (id) => {\n        const taskFound = tasks.find(task => task.id === id)\n\n        if (taskFound) {\n            taskService\n                .remove(id)\n                .then(response => {\n                    setTasks(tasks.filter(task => task.id !== id))\n                })\n                .catch(error => {\n                    alert(\n                        `The task '${taskFound.content}' was already deleted from server`\n                    )\n                    setTasks(tasks.filter(task => task.id !== id))\n                })\n        }\n    }\n\n    const switchStateOfTask = (id) => {\n        // find etsii ensimmäisen arvon listasta, joka vastaa käyttäjän klikkaamaa arvoa\n        // kopioidaan klikkaama arvo ja asetetaan tilaksi vastakohta, koska klikkauksesta arvo muuttuu tehdyksi/ei tehdyksi\n        const task = tasks.find(task => task.id === id)\n        const changedTask = { ...task, done: !task.done }\n\n        // päivitetään kantaan käyttäjän muuttama arvo\n        // jos id:t vastaavat (setTasks-kohta), palautetaan päivitetty arvo (returnedTask) listan joukkoon\n        taskService\n            .update(id, changedTask)\n            .then(returnedTask => {\n                setTasks(tasks.map(task => task.id === id ? returnedTask : task))\n            })\n    }\n\n    const editTask = (id, content) => {\n        const taskFound = tasks.find(task => task.id === id)\n\n\n    }\n\n    const setUpdate = (content, id) => {\n        \n        \n        tasks.map(task => {      \n          if (task.id === id) {\n            task.content = content;\n          }\n        })\n            setTasks({\n          tasks: tasks\n        })\n          \n      }\n\n        const clearList = () => {\n            setTasks([])\n        }\n\n        const handleTaskChange = (event) => {\n            console.log(event.target.value)\n            setNewTask(event.target.value)\n        }\n\n        return (\n            <div>\n                <h1>Todo-list</h1>\n\n                <TaskForm\n                    onSubmit={addTask}\n                    taskValue={newTask}\n                    onTaskChange={handleTaskChange}\n                />\n                <Tasks\n                    tasks={tasks}\n                    removeTask={removeTask}\n                    switchStateOfTask={switchStateOfTask}\n                    editTask={editTask}\n                />\n\n            \n                <button onClick={clearList} type=\"button\" className=\"clear-items\">Clear list</button>\n\n            </div>\n        )\n    }\n\n    export default App"]},"metadata":{},"sourceType":"module"}