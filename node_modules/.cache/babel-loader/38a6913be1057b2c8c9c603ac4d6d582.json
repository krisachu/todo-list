{"ast":null,"code":"var _jsxFileName = \"/Users/kristina/Coding/portfolio/todo-list/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Tasks from './components/Tasks';\nimport TaskForm from './components/TaskForm';\nimport taskService from './services/tasks';\n\nconst App = () => {\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n  const [editableTask, setEditableTask] = useState(null);\n  useEffect(() => {\n    console.log('Effect');\n    taskService.getAll().then(initialTasks => {\n      setTasks(initialTasks);\n    });\n  }, []);\n\n  const addTask = event => {\n    event.preventDefault();\n    const taskObject = {\n      content: newTask,\n      done: false\n    };\n    taskService.create(taskObject).then(returnedTask => {\n      console.log('returnedTask', returnedTask);\n      setTasks(tasks.concat(returnedTask));\n      setNewTask('');\n    });\n  };\n\n  const removeTask = id => {\n    const taskFound = tasks.find(task => task.id === id);\n\n    if (taskFound) {\n      taskService.remove(id).then(response => {\n        setTasks(tasks.filter(task => task.id !== id));\n      }).catch(error => {\n        alert(`The task '${taskFound.content}' was already deleted from server`);\n        setTasks(tasks.filter(task => task.id !== id));\n      });\n    }\n  };\n\n  const switchStateOfTask = id => {\n    // find etsii ensimmäisen arvon listasta, joka vastaa käyttäjän klikkaamaa arvoa\n    // kopioidaan klikkaama arvo ja asetetaan tilaksi vastakohta, koska klikkauksesta arvo muuttuu tehdyksi/ei tehdyksi\n    const task = tasks.find(task => task.id === id);\n    const changedTask = { ...task,\n      done: !task.done\n    }; // päivitetään kantaan käyttäjän muuttama arvo\n    // jos id:t vastaavat (setTasks-kohta), palautetaan päivitetty arvo (returnedTask) listan joukkoon\n\n    taskService.update(id, changedTask).then(returnedTask => {\n      setTasks(tasks.map(task => task.id === id ? returnedTask : task));\n    });\n  }; // etsitään eka arvo listasta, joka vastaa käyttäjän klikkaamaa arvoa\n  // tallennetaan klimmaama arvo steittiin\n\n\n  const onEditStart = id => {\n    const taskForEdit = tasks.find(task => task.id === id);\n    setEditableTask(taskForEdit);\n  };\n\n  const onEditTask = event => {\n    const updatedEditableTask = { ...editableTask,\n      content: event.target.value\n    };\n    console.log(event.target.value);\n    setEditableTask(updatedEditableTask);\n  };\n\n  const onEditEnd = id => {\n    const taskFound = tasks.find(task => task.id === id);\n\n    if (taskFound) {\n      setTasks();\n    }\n  }; // const clearList = () => {\n  //     setTasks([])\n  // }\n\n\n  const handleTaskChange = event => {\n    console.log(event.target.value);\n    setNewTask(event.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"My todo list\"), /*#__PURE__*/React.createElement(TaskForm, {\n    onSubmit: addTask,\n    taskValue: newTask,\n    onTaskChange: handleTaskChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tasks, {\n    tasks: tasks,\n    removeTask: removeTask,\n    switchStateOfTask: switchStateOfTask,\n    onEditStart: onEditStart,\n    onEditTask: editTask,\n    onEditEnd: onEditEnd,\n    editableTask: editableTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default App; // <button onClick={clearList} type=\"button\" className=\"clear-items\">Clear list</button>","map":{"version":3,"sources":["/Users/kristina/Coding/portfolio/todo-list/src/App.js"],"names":["React","useState","useEffect","Tasks","TaskForm","taskService","App","tasks","setTasks","newTask","setNewTask","editableTask","setEditableTask","console","log","getAll","then","initialTasks","addTask","event","preventDefault","taskObject","content","done","create","returnedTask","concat","removeTask","id","taskFound","find","task","remove","response","filter","catch","error","alert","switchStateOfTask","changedTask","update","map","onEditStart","taskForEdit","onEditTask","updatedEditableTask","target","value","onEditEnd","handleTaskChange","editTask"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Tasks from './components/Tasks';\nimport TaskForm from './components/TaskForm';\nimport taskService from './services/tasks';\n\nconst App = () => {\n    const [tasks, setTasks] = useState([]);\n    const [newTask, setNewTask] = useState('');\n    const [editableTask, setEditableTask] = useState(null)\n\n    useEffect(() => {\n        console.log('Effect');\n        taskService.getAll().then((initialTasks) => {\n            setTasks(initialTasks);\n        });\n    }, []);\n\n    const addTask = (event) => {\n        event.preventDefault();\n\n        const taskObject = {\n            content: newTask,\n            done: false,\n        };\n\n        taskService.create(taskObject).then((returnedTask) => {\n            console.log('returnedTask', returnedTask);\n            setTasks(tasks.concat(returnedTask));\n            setNewTask('');\n        });\n    };\n\n    const removeTask = (id) => {\n        const taskFound = tasks.find((task) => task.id === id);\n\n        if (taskFound) {\n            taskService\n                .remove(id)\n                .then((response) => {\n                    setTasks(tasks.filter((task) => task.id !== id));\n                })\n                .catch((error) => {\n                    alert(\n                        `The task '${taskFound.content}' was already deleted from server`\n                    );\n                    setTasks(tasks.filter((task) => task.id !== id));\n                });\n        }\n    };\n\n    const switchStateOfTask = (id) => {\n        // find etsii ensimmäisen arvon listasta, joka vastaa käyttäjän klikkaamaa arvoa\n        // kopioidaan klikkaama arvo ja asetetaan tilaksi vastakohta, koska klikkauksesta arvo muuttuu tehdyksi/ei tehdyksi\n        const task = tasks.find((task) => task.id === id);\n        const changedTask = { ...task, done: !task.done };\n\n        // päivitetään kantaan käyttäjän muuttama arvo\n        // jos id:t vastaavat (setTasks-kohta), palautetaan päivitetty arvo (returnedTask) listan joukkoon\n        taskService.update(id, changedTask).then((returnedTask) => {\n            setTasks(\n                tasks.map((task) => (task.id === id ? returnedTask : task))\n            );\n        });\n    };\n\n    // etsitään eka arvo listasta, joka vastaa käyttäjän klikkaamaa arvoa\n    // tallennetaan klimmaama arvo steittiin\n\n    const onEditStart = id => {\n        const taskForEdit = tasks.find(task => task.id === id)\n        setEditableTask(taskForEdit)\n    }\n\n    const onEditTask = (event) => {\n        const updatedEditableTask = { ...editableTask, content: event.target.value }\n        console.log(event.target.value);\n        setEditableTask(updatedEditableTask)\n    };\n\n    const onEditEnd = id => {\n        const taskFound = tasks.find((task) => task.id === id);\n\n        if (taskFound) {\n            setTasks();\n        }\n    }\n    \n\n    // const clearList = () => {\n    //     setTasks([])\n    // }\n\n    const handleTaskChange = (event) => {\n        console.log(event.target.value);\n        setNewTask(event.target.value);\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>My todo list</h1>\n\n            <TaskForm\n                onSubmit={addTask}\n                taskValue={newTask}\n                onTaskChange={handleTaskChange}\n            />\n            <Tasks\n                tasks={tasks}\n                removeTask={removeTask}\n                switchStateOfTask={switchStateOfTask}\n\n                onEditStart={onEditStart}\n                onEditTask={editTask}\n                onEditEnd={onEditEnd}\n                editableTask={editableTask}\n\n            />\n        </div>\n    );\n};\n\nexport default App;\n\n// <button onClick={clearList} type=\"button\" className=\"clear-items\">Clear list</button>\n"]},"metadata":{},"sourceType":"module"}